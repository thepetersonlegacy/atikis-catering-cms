# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  siteSettings(relativePath: String): SiteSettings!
  siteSettingsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SiteSettingsFilter): SiteSettingsConnection!
  menuItems(relativePath: String): MenuItems!
  menuItemsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: MenuItemsFilter): MenuItemsConnection!
  testimonials(relativePath: String): Testimonials!
  testimonialsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: TestimonialsFilter): TestimonialsConnection!
  galleryImages(relativePath: String): GalleryImages!
  galleryImagesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: GalleryImagesFilter): GalleryImagesConnection!
  translations(relativePath: String): Translations!
  translationsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: TranslationsFilter): TranslationsConnection!
}

input DocumentFilter {
  siteSettings: SiteSettingsFilter
  menuItems: MenuItemsFilter
  testimonials: TestimonialsFilter
  galleryImages: GalleryImagesFilter
  translations: TranslationsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = SiteSettings | MenuItems | Testimonials | GalleryImages | Translations | Folder

type SiteSettingsContact {
  email: String
  phone: String
  address: String
}

type SiteSettingsHero {
  title: String
  subtitle: String
  backgroundImage: String
}

type SiteSettings implements Node & Document {
  contact: SiteSettingsContact
  hero: SiteSettingsHero
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input SiteSettingsContactFilter {
  email: StringFilter
  phone: StringFilter
  address: StringFilter
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input SiteSettingsHeroFilter {
  title: StringFilter
  subtitle: StringFilter
  backgroundImage: ImageFilter
}

input SiteSettingsFilter {
  contact: SiteSettingsContactFilter
  hero: SiteSettingsHeroFilter
}

type SiteSettingsConnectionEdges {
  cursor: String!
  node: SiteSettings
}

type SiteSettingsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SiteSettingsConnectionEdges]
}

type MenuItems implements Node & Document {
  name: String!
  description: String
  price: Float
  category: String
  image: String
  featured: Boolean
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input MenuItemsFilter {
  name: StringFilter
  description: StringFilter
  price: NumberFilter
  category: StringFilter
  image: ImageFilter
  featured: BooleanFilter
}

type MenuItemsConnectionEdges {
  cursor: String!
  node: MenuItems
}

type MenuItemsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [MenuItemsConnectionEdges]
}

type Testimonials implements Node & Document {
  name: String!
  company: String
  content: String!
  rating: Float
  avatar: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input TestimonialsFilter {
  name: StringFilter
  company: StringFilter
  content: StringFilter
  rating: NumberFilter
  avatar: ImageFilter
}

type TestimonialsConnectionEdges {
  cursor: String!
  node: Testimonials
}

type TestimonialsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [TestimonialsConnectionEdges]
}

type GalleryImages implements Node & Document {
  src: String!
  alt: String!
  caption: String
  album: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input GalleryImagesFilter {
  src: ImageFilter
  alt: StringFilter
  caption: StringFilter
  album: StringFilter
}

type GalleryImagesConnectionEdges {
  cursor: String!
  node: GalleryImages
}

type GalleryImagesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [GalleryImagesConnectionEdges]
}

type TranslationsNav {
  home: String
  menu: String
  gallery: String
  testimonials: String
  contact: String
  orderNow: String
}

type TranslationsHero {
  title: String
  subtitle: String
  viewMenu: String
}

type TranslationsFooter {
  quickLinks: String
  contactInfo: String
  followUs: String
}

type Translations implements Node & Document {
  language: String!
  nav: TranslationsNav
  hero: TranslationsHero
  footer: TranslationsFooter
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input TranslationsNavFilter {
  home: StringFilter
  menu: StringFilter
  gallery: StringFilter
  testimonials: StringFilter
  contact: StringFilter
  orderNow: StringFilter
}

input TranslationsHeroFilter {
  title: StringFilter
  subtitle: StringFilter
  viewMenu: StringFilter
}

input TranslationsFooterFilter {
  quickLinks: StringFilter
  contactInfo: StringFilter
  followUs: StringFilter
}

input TranslationsFilter {
  language: StringFilter
  nav: TranslationsNavFilter
  hero: TranslationsHeroFilter
  footer: TranslationsFooterFilter
}

type TranslationsConnectionEdges {
  cursor: String!
  node: Translations
}

type TranslationsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [TranslationsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateSiteSettings(relativePath: String!, params: SiteSettingsMutation!): SiteSettings!
  createSiteSettings(relativePath: String!, params: SiteSettingsMutation!): SiteSettings!
  updateMenuItems(relativePath: String!, params: MenuItemsMutation!): MenuItems!
  createMenuItems(relativePath: String!, params: MenuItemsMutation!): MenuItems!
  updateTestimonials(relativePath: String!, params: TestimonialsMutation!): Testimonials!
  createTestimonials(relativePath: String!, params: TestimonialsMutation!): Testimonials!
  updateGalleryImages(relativePath: String!, params: GalleryImagesMutation!): GalleryImages!
  createGalleryImages(relativePath: String!, params: GalleryImagesMutation!): GalleryImages!
  updateTranslations(relativePath: String!, params: TranslationsMutation!): Translations!
  createTranslations(relativePath: String!, params: TranslationsMutation!): Translations!
}

input DocumentUpdateMutation {
  siteSettings: SiteSettingsMutation
  menuItems: MenuItemsMutation
  testimonials: TestimonialsMutation
  galleryImages: GalleryImagesMutation
  translations: TranslationsMutation
  relativePath: String
}

input DocumentMutation {
  siteSettings: SiteSettingsMutation
  menuItems: MenuItemsMutation
  testimonials: TestimonialsMutation
  galleryImages: GalleryImagesMutation
  translations: TranslationsMutation
}

input SiteSettingsContactMutation {
  email: String
  phone: String
  address: String
}

input SiteSettingsHeroMutation {
  title: String
  subtitle: String
  backgroundImage: String
}

input SiteSettingsMutation {
  contact: SiteSettingsContactMutation
  hero: SiteSettingsHeroMutation
}

input MenuItemsMutation {
  name: String
  description: String
  price: Float
  category: String
  image: String
  featured: Boolean
}

input TestimonialsMutation {
  name: String
  company: String
  content: String
  rating: Float
  avatar: String
}

input GalleryImagesMutation {
  src: String
  alt: String
  caption: String
  album: String
}

input TranslationsNavMutation {
  home: String
  menu: String
  gallery: String
  testimonials: String
  contact: String
  orderNow: String
}

input TranslationsHeroMutation {
  title: String
  subtitle: String
  viewMenu: String
}

input TranslationsFooterMutation {
  quickLinks: String
  contactInfo: String
  followUs: String
}

input TranslationsMutation {
  language: String
  nav: TranslationsNavMutation
  hero: TranslationsHeroMutation
  footer: TranslationsFooterMutation
}

schema {
  query: Query
  mutation: Mutation
}
